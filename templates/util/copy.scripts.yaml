AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates glue S3 buckets and upload scripts to it. (qs-1r18anahd)"
Resources:
    MdaGlueScriptBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private
        PublicAccessBlockConfiguration:
          BlockPublicAcls: True
          BlockPublicPolicy: True
          IgnorePublicAcls: True
          RestrictPublicBuckets: True
        VersioningConfiguration:
          Status: Enabled

    CopyArtifacts:
      Type: Custom::CopyArtifacts
      Properties:
        ServiceToken: !GetAtt 'CopyArtifactsFunction.Arn'
        DestBucket: !Ref MdaGlueScriptBucket
        DestPrefix: 'scripts/'
        SourceBucket: !Ref QSS3BucketName
        Prefix: !Sub '${QSS3KeyPrefix}scripts/assets/glue/'
        Objects:
          - meterreadings-integration-job.py
          - weatherdata-integration-job.py
          - meterreadings-late-reads-cleanup-job.py

    CopyArtifactsRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        Path: /
        Policies:
          - PolicyName: lambda-copier
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:ListObjectVersions
                  Resource:
                    - !Sub 'arn:${AWS::Partition}:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:DeleteObject
                    - s3:DeleteObjects
                    - s3:GetObject
                    - s3:GetObjectVersion
                    - s3:GetObjectAttributes
                    - s3:ListBucket
                    - s3:ListBucketVersions
                    - s3:GetBucketVersioning
                    - s3:GetBucketVersion
                    - s3:ListObjectVersionsing
                    - s3:ListObjectVersions
                    - s3:DeleteObjectVersion
                    - s3:DeleteObject
                  Resource:
                    - !Sub 'arn:${AWS::Partition}:s3:::${MdaGlueScriptBucket}/*'
                    - !Sub 'arn:${AWS::Partition}:s3:::${MdaGlueScriptBucket}'

    CopyArtifactsFunction:
      Type: AWS::Lambda::Function
      Properties:
        Description: Copies objects from a source S3 bucket to a destination
        Handler: index.handler
        Runtime: python3.7
        Role: !GetAtt CopyArtifactsRole.Arn
        Timeout: 240
        Code:
          ZipFile: |
            import json
            import logging
            import threading
            import boto3
            import cfnresponse
            logging.getLogger().setLevel(logging.INFO)
            s3 = boto3.client('s3')
            s3_resource = boto3.resource('s3')
            def copy_objects(source_bucket, dest_bucket, prefix, dest_prefix, objects):
                for o in objects:
                    key = prefix + o
                    copy_source = {
                        'Bucket': source_bucket,
                        'Key': key
                    }
                    dest_key = dest_prefix + o
                    print('copy_source: %s' % copy_source)
                    print('dest_bucket = %s'%dest_bucket)
                    print('key = %s' %key)
                    print('dest_key = %s' % dest_key)
                    s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                          Key=dest_key)
            def bucket_exists(bucket):
                try:
                    s3.head_bucket(Bucket=bucket)
                    return True
                except Exception as e:
                    logging.info('Bucket {} does not exist'.format(bucket))
                    return False
            def delete_objects(bucket, prefix, objects):
                if(bucket_exists):
                    #objects = {'Objects': [{'Key': prefix + o} for o in objects]}
                    #s3.delete_objects(Bucket=bucket, Delete=objects)
            
                    s3_bucket = s3_resource.Bucket(bucket)
                    bucket_versioning = s3_resource.BucketVersioning(bucket)
                    if bucket_versioning.status == 'Enabled':
                      s3_bucket.object_versions.delete()
                    else:
                      s3_bucket.objects.all().delete()
            
            def timeout(event, context):
                logging.error('Execution is about to time out, sending failure response to CloudFormation')
                cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
            def handler(event, context):
                # make sure we send a failure to CloudFormation if the function
                # is going to timeout
                timer = threading.Timer((context.get_remaining_time_in_millis()
                          / 1000.00) - 0.5, timeout, args=[event, context])
                timer.start()
                print('Received event: %s' % json.dumps(event))
                status = cfnresponse.SUCCESS
                try:
                    source_bucket = event['ResourceProperties']['SourceBucket']
                    dest_bucket = event['ResourceProperties']['DestBucket']
                    dest_prefix = event['ResourceProperties']['DestPrefix']
                    prefix = event['ResourceProperties']['Prefix']
                    objects = event['ResourceProperties']['Objects']
                    if event['RequestType'] == 'Delete':
                        delete_objects(dest_bucket, dest_prefix, objects)
                    else:
                        copy_objects(source_bucket, dest_bucket, prefix, dest_prefix, objects)
                except Exception as e:
                    logging.error('Exception: %s' % e, exc_info=True)
                    status = cfnresponse.FAILED
                finally:
                    timer.cancel()
                    cfnresponse.send(event, context, status, {}, None)

Outputs:
  MdaGlueScriptBucket:
      Value: !Ref MdaGlueScriptBucket

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'AWS Quick Start configuration'
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix

Parameters:
  QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: aws-quickstart
    Description: >-
      S3 bucket name for the Quick Start assets.
      Only change this value if you customize or extend the Quick Start for your own use.
      This string can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*[/]$'
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/) and must terminate in a forward slash.
    Default: quickstart-aws-utility-meter-data-analytics-platform/
    Description:
      S3 key prefix that is used to simulate a directory for your copy of the
      Quick Start assets. Keep the default prefix unless you are customizing
      the template. Changing this prefix updates code references to point to
      a new Quick Start location. This prefix can include numbers, lowercase
      letters, uppercase letters, hyphens (-), and forward slashes (/). End with
      a forward slash. See https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html
      and https://aws-quickstart.github.io/option1.html.
    Type: String
