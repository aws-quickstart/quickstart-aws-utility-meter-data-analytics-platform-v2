{
  "Comment": "This is the overall ML pipeline orchestrator",
  "StartAt": "CheckStepsToTake",
  "States": {
    "CheckStepsToTake": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${LambdaCheckStepsToTake}" 
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "UpdateMeterIdList",
      "Comment": "decide if anomaly detection, training, inference should be executed"
    },
    "UpdateMeterIdList": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${LambdaListMeterIds}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Anomalies?",
      "OutputPath": "$.Payload"
    },
    "Anomalies?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.anomaly",
          "BooleanEquals": true,
          "Next": "AnomalyStateMachineStart"
        }
      ],
      "Default": "Training?"
    },
    "Training?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.training",
          "BooleanEquals": true,
          "Next": "RunModelTrainingStateMachine"
        }
      ],
      "Default": "Inference?"
    },
    "AnomalyStateMachineStart": {
      "Type": "Task",
      "Resource": "arn:aws:states:::states:startExecution",
      "Parameters": {
        "StateMachineArn": "${AnomalyStateMachine}",
        "Input": {
          "StatePayload": "Hello from Step Functions!",
          "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
        }
      },
      "Next": "Training?",
      "ResultPath": "$.anomalyoutput"
    },
    "PrepForInference": {
      "Type": "Pass",
      "Comment": "See how well this works without batches, if necessary change",
      "Next": "Inference (BatchTransform)"
    },
    "Inference (BatchTransform)": {
      "Type": "Pass",
      "Next": "Store results"
    },
    "Store results": {
      "Type": "Pass",
      "End": true
    },
    "RunModelTrainingStateMachine": {
      "Type": "Pass",
      "Comment": "other state machine: ml-pipeline-training",
      "Next": "Inference?"
    },
    "Inference?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.inference",
          "BooleanEquals": true,
          "Next": "PrepForInference"
        }
      ],
      "Default": "Complete"
    },
    "Complete": {
      "Type": "Pass",
      "End": true
    }
  }
}